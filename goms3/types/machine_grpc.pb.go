// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: types/machine.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MachineClient is the client API for Machine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineClient interface {
	// stream keyword indicates that the Execute RPC operates in a streaming mode, where it can continuously
	// receive and send data rather than just a single request and response. It's particularly useful for scenarios
	// where there is a need for ongoing or asynchronous communication between the client and server, such as real-time
	// data processing, long-lived connections, or data streaming applications.
	Execute(ctx context.Context, opts ...grpc.CallOption) (Machine_ExecuteClient, error)
}

type machineClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineClient(cc grpc.ClientConnInterface) MachineClient {
	return &machineClient{cc}
}

func (c *machineClient) Execute(ctx context.Context, opts ...grpc.CallOption) (Machine_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Machine_ServiceDesc.Streams[0], "/Machine/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &machineExecuteClient{stream}
	return x, nil
}

type Machine_ExecuteClient interface {
	Send(*Instruction) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type machineExecuteClient struct {
	grpc.ClientStream
}

func (x *machineExecuteClient) Send(m *Instruction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *machineExecuteClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MachineServer is the server API for Machine service.
// All implementations must embed UnimplementedMachineServer
// for forward compatibility
type MachineServer interface {
	// stream keyword indicates that the Execute RPC operates in a streaming mode, where it can continuously
	// receive and send data rather than just a single request and response. It's particularly useful for scenarios
	// where there is a need for ongoing or asynchronous communication between the client and server, such as real-time
	// data processing, long-lived connections, or data streaming applications.
	Execute(Machine_ExecuteServer) error
	mustEmbedUnimplementedMachineServer()
}

// UnimplementedMachineServer must be embedded to have forward compatible implementations.
type UnimplementedMachineServer struct {
}

func (UnimplementedMachineServer) Execute(Machine_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedMachineServer) mustEmbedUnimplementedMachineServer() {}

// UnsafeMachineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineServer will
// result in compilation errors.
type UnsafeMachineServer interface {
	mustEmbedUnimplementedMachineServer()
}

func RegisterMachineServer(s grpc.ServiceRegistrar, srv MachineServer) {
	s.RegisterService(&Machine_ServiceDesc, srv)
}

func _Machine_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MachineServer).Execute(&machineExecuteServer{stream})
}

type Machine_ExecuteServer interface {
	Send(*Result) error
	Recv() (*Instruction, error)
	grpc.ServerStream
}

type machineExecuteServer struct {
	grpc.ServerStream
}

func (x *machineExecuteServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *machineExecuteServer) Recv() (*Instruction, error) {
	m := new(Instruction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Machine_ServiceDesc is the grpc.ServiceDesc for Machine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Machine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Machine",
	HandlerType: (*MachineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Machine_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "types/machine.proto",
}
